{"version":3,"sources":["customTypes/Intervals.ts","components/VoiceLevel/VoiceLevel.tsx","components/Timers/Timers.tsx","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["WallClockInterval","interval","startTime","endTime","inInterval","moment","isBetween","start","end","this","timeFormat","toDate","VoiceLevelInterval","vlii","canTalk","showTimer","LunchSchedule","info","grade","lunchTime","voiceLevelIntervals","atLunch","undefined","intervals","Wrapper","styled","div","props","Header","h1","Clock","p","VoiceLevel","useState","getActiveInterval","activeInterval","setActiveInterval","useEffect","timerID","setInterval","newActiveInterval","isEqual","clearInterval","date","renderer","minutes","seconds","toString","padStart","map","i","find","vli","Timers","lunchTimes","getGradesAtLunch","Set","t","filter","gradesAtLunch","setGradesAtLunch","newGradesAtLunch","has","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5c4a0f4.chunk.js","sourcesContent":["import moment from \"moment\";\n\n// For example 3:15 AM to 4:10 AM. This interval repreats daily.\n// This naive implementation doesn't behave well across midnight.\nexport class WallClockInterval {\n  static timeFormat = \"hh:mm a\";\n  private startTime: string;\n  private endTime: string;\n\n  constructor(interval: Interval) {\n    this.startTime = interval.start;\n    this.endTime = interval.end;\n  }\n\n  get start(): Date {\n    return moment(this.startTime, WallClockInterval.timeFormat).toDate();\n  }\n\n  get end(): Date {\n    return moment(this.endTime, WallClockInterval.timeFormat).toDate();\n  }\n\n  inInterval = (): boolean => moment().isBetween(this.start, this.end);\n}\n\ninterface Interval {\n  start: string;\n  end: string;\n}\nexport interface VoiceLevelIntervalInfo extends Interval {\n  canTalk: boolean;\n  showTimer: boolean;\n}\n\nexport class VoiceLevelInterval extends WallClockInterval {\n  canTalk: boolean;\n  showTimer: boolean;\n\n  constructor(vlii: VoiceLevelIntervalInfo) {\n    super(vlii);\n    this.canTalk = vlii.canTalk;\n    this.showTimer = vlii.showTimer;\n  }\n}\n\nexport interface LunchScheduleInfo {\n  grade: string;\n  lunchTime: Interval;\n  intervals: VoiceLevelIntervalInfo[];\n}\n\nexport class LunchSchedule {\n  grade: string;\n  lunchTime: WallClockInterval;\n  voiceLevelIntervals: VoiceLevelIntervalInfo[];\n\n  constructor(info: LunchScheduleInfo) {\n    this.grade = info.grade;\n    this.lunchTime = new WallClockInterval(info.lunchTime);\n    this.voiceLevelIntervals = info.intervals;\n  }\n  atLunch: () => boolean = () =>\n    !(this.lunchTime === undefined || !this.lunchTime.inInterval());\n}\n","import { isEqual } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport Countdown from \"react-countdown\";\nimport styled from \"styled-components\";\nimport {\n  VoiceLevelInterval,\n  VoiceLevelIntervalInfo\n} from \"../../customTypes/Intervals\";\n\ninterface WrapperProps {\n  canTalk: boolean;\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  background-color: ${props => (props.canTalk ? \" #99ff99\" : \"#ffb3b3\")};\n  padding: 3em;\n`;\n\nconst Header = styled.h1`\n  font-size: 80px;\n  margin: 1em;\n  padding: 0;\n`;\n\nconst Clock = styled.p`\n  font-size: 100px;\n  margin: 1em;\n  padding: 0;\n`;\n\ninterface VoiceLevelProps {\n  grade: string;\n  intervals: VoiceLevelIntervalInfo[];\n}\n\nconst VoiceLevel = ({ grade, intervals }: VoiceLevelProps) => {\n  const [activeInterval, setActiveInterval] = useState(\n    getActiveInterval(intervals)\n  );\n\n  useEffect(() => {\n    const timerID = setInterval(() => {\n      const newActiveInterval = getActiveInterval(intervals);\n      if (!isEqual(activeInterval, newActiveInterval)) {\n        setActiveInterval(newActiveInterval);\n      }\n    }, 1000);\n    return () => clearInterval(timerID);\n  });\n\n  if (!activeInterval) return null;\n  return (\n    <Wrapper canTalk={activeInterval.canTalk}>\n      <Header>{grade}</Header>\n      {activeInterval.showTimer && (\n        <Countdown\n          date={activeInterval.end}\n          renderer={({ minutes, seconds }) => (\n            <Clock>\n              {minutes}:{seconds.toString().padStart(2, \"0\")}\n            </Clock>\n          )}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default VoiceLevel;\n\n// helpers\n\nconst getActiveInterval = (intervals: VoiceLevelIntervalInfo[]) =>\n  intervals.map(i => new VoiceLevelInterval(i)).find(vli => vli.inInterval());\n","import React, { useEffect, useState } from \"react\";\nimport { isEqual } from \"lodash\";\nimport { LunchSchedule, LunchScheduleInfo } from \"../../customTypes/Intervals\";\nimport VoiceLevel from \"../VoiceLevel\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n`;\n\nexport interface TimersProps {\n  lunchTimes: LunchScheduleInfo[];\n}\n\nconst Timers = ({ lunchTimes }: TimersProps) => {\n  const getGradesAtLunch = (lunchTimes: LunchScheduleInfo[]): Set<string> =>\n    new Set(\n      lunchTimes\n        .map(t => new LunchSchedule(t))\n        .filter(t => t.atLunch())\n        .map(t => t.grade)\n    );\n\n  const [gradesAtLunch, setGradesAtLunch] = useState(\n    getGradesAtLunch(lunchTimes)\n  );\n\n  useEffect(() => {\n    const timerID = setInterval(() => {\n      const newGradesAtLunch = getGradesAtLunch(lunchTimes);\n      if (!isEqual(gradesAtLunch, newGradesAtLunch)) {\n        setGradesAtLunch(newGradesAtLunch);\n      }\n    }, 1000);\n    return () => clearInterval(timerID);\n  });\n\n  return (\n    <Wrapper>\n      {lunchTimes\n        .filter(lunchTime => gradesAtLunch.has(lunchTime.grade))\n        .map(t => (\n          <VoiceLevel key={t.grade} grade={t.grade} intervals={t.intervals} />\n        ))}\n    </Wrapper>\n  );\n};\n\nexport default Timers;\n","export const lunchTimes = [\n  {\n    grade: \"Kindergarten\",\n    lunchTime: { start: \"10:55 am\", end: \"11:30 am\" },\n    intervals: [\n      { start: \"10:55 am\", end: \"11:05 am\", canTalk: false, showTimer: true },\n      { start: \"11:05 am\", end: \"11:25 am\", canTalk: true, showTimer: true },\n      { start: \"11:25 am\", end: \"11:30 am\", canTalk: false, showTimer: false }\n    ]\n  },\n  {\n    grade: \"First Grade\",\n    lunchTime: { start: \"11:35 am\", end: \"12:05 pm\" },\n    intervals: [\n      { start: \"11:35 am\", end: \"11:45 am\", canTalk: false, showTimer: true },\n      { start: \"11:45 am\", end: \"12:00 pm\", canTalk: true, showTimer: true },\n      { start: \"12:00 pm\", end: \"12:05 pm\", canTalk: false, showTimer: false }\n    ]\n  },\n  {\n    grade: \"Second Grade\",\n    lunchTime: { start: \"12:35 pm\", end: \"01:05 pm\" },\n    intervals: [\n      { start: \"12:35 pm\", end: \"12:45 pm\", canTalk: false, showTimer: true },\n      { start: \"12:45 pm\", end: \"01:00 pm\", canTalk: true, showTimer: true },\n      { start: \"01:00 pm\", end: \"01:05 pm\", canTalk: false, showTimer: false }\n    ]\n  },\n  {\n    grade: \"Third Grade\",\n    lunchTime: { start: \"11:25 am\", end: \"11:55 am\" },\n    intervals: [\n      { start: \"11:25 am\", end: \"11:35 am\", canTalk: false, showTimer: true },\n      { start: \"11:35 am\", end: \"11:50 am\", canTalk: true, showTimer: true },\n      { start: \"11:50 am\", end: \"11:55 am\", canTalk: false, showTimer: false }\n    ]\n  },\n  {\n    grade: \"Fourth Grade\",\n    lunchTime: { start: \"12:20 pm\", end: \"12:50 pm\" },\n    intervals: [\n      { start: \"12:20 pm\", end: \"12:30 pm\", canTalk: false, showTimer: true },\n      { start: \"12:30 pm\", end: \"12:45 pm\", canTalk: true, showTimer: true },\n      { start: \"12:45 pm\", end: \"12:50 pm\", canTalk: false, showTimer: false }\n    ]\n  },\n  {\n    grade: \"Fifth Grade\",\n    lunchTime: { start: \"11:55 am\", end: \"12:30 pm\" },\n    intervals: [\n      { start: \"11:55 am\", end: \"12:05 pm\", canTalk: false, showTimer: true },\n      { start: \"12:05 pm\", end: \"12:25 pm\", canTalk: true, showTimer: true },\n      { start: \"12:25 pm\", end: \"12:30 pm\", canTalk: false, showTimer: false }\n    ]\n  }\n];\n","import React from \"react\";\nimport \"./App.css\";\nimport Timers from \"./components/Timers\";\nimport { lunchTimes } from \"./config\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>North Ridge Lunch Schedule</h1>\n      <Timers lunchTimes={lunchTimes} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}